export const authConfig = {
  session: { strategy: 'jwt' as const },
  pages: {
    // ‡∏•‡∏ö signIn page ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ NextAuth redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ /authentication
    // signIn: '/authentication',
  },
  callbacks: {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    authorized({ auth, request: { nextUrl } }: any) {
      const isLoggedIn = !!auth?.user
      const isOnProtectedRoute = nextUrl.pathname.startsWith('/resume') ||
                                nextUrl.pathname.startsWith('/search') ||
                                nextUrl.pathname.startsWith('/todos')
      
      console.log('üõ°Ô∏è Authorized callback:', {
        path: nextUrl.pathname,
        isLoggedIn,
        isOnProtectedRoute
      })
      
      // ‡πÉ‡∏´‡πâ middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ redirect ‡πÅ‡∏ó‡∏ô ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
      if (isOnProtectedRoute) {
        return isLoggedIn
      }
      
      return true
    },
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° redirect callback ‡πÉ‡∏ô config ‡∏î‡πâ‡∏ß‡∏¢
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    async redirect({ url, baseUrl }: any) {
      console.log('üü° CONFIG REDIRECT CALLBACK:', { url, baseUrl })
      console.log('üü° FORCING HOME REDIRECT FROM CONFIG')
      return baseUrl + '/'
    },
  },
  providers: [], // Add providers with an empty array for now
}
