import { test, expect } from '@playwright/test';
import { AuthHelper, TodoHelper, EmailSettingsHelper } from './helpers';

test.describe('Integration Tests', () => {
  test('complete todo workflow', async ({ page }) => {
    const auth = new AuthHelper(page);
    const todo = new TodoHelper(page);
    
    // 1. Login
    await auth.login();
    await auth.expectLoggedIn();
    
    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° todos ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    await todo.addTodo({
      title: '‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
      description: '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ',
      category: '‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô',
      priority: 'high',
      dueDate: todo.getTomorrowDateString()
    });
    
    await todo.addTodo({
      title: '‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      description: '‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô',
      category: '‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
      priority: 'medium'
    });
    
    await todo.addTodo({
      title: '‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢',
      category: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
      priority: 'low'
    });
    
    // 3. ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à
    await todo.toggleTodo('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ');
    await todo.expectTodoCompleted('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', true);
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö filter
    await todo.filterTodos('completed');
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', false);
    
    await todo.filterTodos('active');
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', false);
    
    await todo.filterTodos('all');
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', true);
    
    // 5. ‡∏•‡∏ö‡∏á‡∏≤‡∏ô
    await todo.deleteTodo('‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢');
    
    // 6. ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ email
    await page.click('a:has-text("üìß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email Notification")');
    await expect(page).toHaveURL('/line-notify');
    
    // 7. ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ todos
    await page.click('a:has-text("‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Todo List")');
    await expect(page).toHaveURL('/todos');
    
    // 8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö persistence
    await page.reload();
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', true);
    await todo.expectTodoCompleted('‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', true);
    
    // 9. Logout
    await auth.logout();
    await auth.expectLoggedOut();
  });

  test('email notification settings workflow', async ({ page }) => {
    const auth = new AuthHelper(page);
    const emailSettings = new EmailSettingsHelper(page);
    
    // 1. Login ‡πÅ‡∏•‡∏∞‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    await auth.login();
    await emailSettings.goToSettings();
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    await expect(page.locator('h3:has-text("üìö ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Gmail SMTP")')).toBeVisible();
    await expect(page.locator('h3:has-text("‚ú® ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥ Email Notification")')).toBeVisible();
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    await expect(page.locator('button:has-text("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")')).toBeVisible();
    await expect(page.locator('button:has-text("üìß ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö")')).toBeVisible();
    
    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå external
    await expect(page.locator('a[href*="myaccount.google.com"]')).toHaveCount(2);
    
    // 5. ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ todos
    await page.click('a:has-text("‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Todo List")');
    await expect(page).toHaveURL('/todos');
  });

  test('authentication flow edge cases', async ({ page }) => {
    const auth = new AuthHelper(page);
    
    // 1. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ protected route ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà login
    await page.goto('/todos');
    await expect(page).toHaveURL('/authentication');
    
    // 2. Login ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤ auth ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    await auth.login();
    await page.goto('/authentication');
    await expect(page).toHaveURL('/');
    
    // 3. Logout ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ protected route
    await auth.logout();
    await page.goto('/todos');
    await expect(page).toHaveURL('/authentication');
    
    // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö invalid credentials
    await page.fill('#email', 'wrong@example.com');
    await page.fill('#password', 'wrong');
    
    // ‡∏£‡∏≠ alert dialog
    let alertShown = false;
    page.on('dialog', async dialog => {
      expect(dialog.message()).toContain('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      alertShown = true;
      await dialog.accept();
    });
    
    await page.click('button[type="submit"]');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ authentication
    await expect(page).toHaveURL('/authentication');
    
    // 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Auto-fill ‡πÅ‡∏•‡∏∞ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    await page.click('button:has-text("üî∏ Auto-fill Admin")');
    await expect(page.locator('#email')).toHaveValue('admin@example.com');
    await expect(page.locator('#password')).toHaveValue('password');
    
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/');
  });

  test('responsive design on mobile', async ({ page }) => {
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });
    
    const auth = new AuthHelper(page);
    const todo = new TodoHelper(page);
    
    // 1. Login on mobile
    await auth.login();
    await auth.expectLoggedIn();
    
    // 2. ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô todo list ‡∏ö‡∏ô mobile
    await todo.addTodo({
      title: '‡∏á‡∏≤‡∏ô‡∏ö‡∏ô Mobile',
      description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠',
      priority: 'medium'
    });
    
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ö‡∏ô Mobile', true);
    
    // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ toggle ‡∏ö‡∏ô mobile
    await todo.toggleTodo('‡∏á‡∏≤‡∏ô‡∏ö‡∏ô Mobile');
    await todo.expectTodoCompleted('‡∏á‡∏≤‡∏ô‡∏ö‡∏ô Mobile', true);
    
    // 4. ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô mobile
    await page.click('a:has-text("üìß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email Notification")');
    await expect(page).toHaveURL('/line-notify');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ö‡∏ô mobile
    await expect(page.locator('h1')).toBeVisible();
    await expect(page.locator('button:has-text("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")')).toBeVisible();
  });

  test('localStorage persistence across sessions', async ({ page }) => {
    const auth = new AuthHelper(page);
    const todo = new TodoHelper(page);
    
    // Session 1: ‡πÄ‡∏û‡∏¥‡πà‡∏° todos
    await auth.login();
    await todo.addTodo({ title: '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1', priority: 'high' });
    await todo.addTodo({ title: '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2', priority: 'low' });
    await todo.toggleTodo('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1');
    
    // Logout
    await auth.logout();
    
    // Session 2: Login ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    await auth.login();
    await page.goto('/todos');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ todos ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2', true);
    await todo.expectTodoCompleted('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1', true);
    await todo.expectTodoCompleted('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2', false);
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    await todo.addTodo({ title: '‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3', priority: 'medium' });
    
    // Refresh page
    await page.reload();
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 1', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 2', true);
    await todo.expectTodoVisible('‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà 3', true);
  });
});
