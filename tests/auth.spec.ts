import { test, expect } from '@playwright/test';

test.describe('Authentication', () => {
  test('should login with valid credentials', async ({ page }) => {
    await page.goto('/authentication');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ login
    await expect(page).toHaveTitle(/Next.js 15/);
    await expect(page.locator('h2')).toContainText('Welcome Back!');
    
    // ‡πÉ‡∏™‡πà email ‡πÅ‡∏•‡∏∞ password
    await page.fill('#email', 'admin@example.com');
    await page.fill('#password', 'password');
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° login
    await page.click('button[type="submit"]');
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ redirect ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ home
    await expect(page).toHaveURL('/');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏õ‡∏∏‡πà‡∏° logout
    await expect(page.locator('button:has-text("Log out")')).toBeVisible();
  });

  test('should show error with invalid credentials', async ({ page }) => {
    await page.goto('/authentication');
    
    // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î
    await page.fill('#email', 'wrong@example.com');
    await page.fill('#password', 'wrongpassword');
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° login
    await page.click('button[type="submit"]');
    
    // ‡∏£‡∏≠ alert ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
    page.on('dialog', async dialog => {
      expect(dialog.message()).toContain('‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      await dialog.accept();
    });
  });

  test('should auto-fill admin credentials', async ({ page }) => {
    await page.goto('/authentication');
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° Auto-fill Admin
    await page.click('button:has-text("üî∏ Auto-fill Admin")');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ fields ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await expect(page.locator('#email')).toHaveValue('admin@example.com');
    await expect(page.locator('#password')).toHaveValue('password');
  });

  test('should redirect to home if already logged in', async ({ page }) => {
    // Login ‡∏Å‡πà‡∏≠‡∏ô
    await page.goto('/authentication');
    await page.fill('#email', 'admin@example.com');
    await page.fill('#password', 'password');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/');
    
    // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ authentication ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    await page.goto('/authentication');
    
    // ‡∏Ñ‡∏ß‡∏£‡∏ñ‡∏π‡∏Å redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ home
    await expect(page).toHaveURL('/');
  });

  test('should logout successfully', async ({ page }) => {
    // Login ‡∏Å‡πà‡∏≠‡∏ô
    await page.goto('/authentication');
    await page.fill('#email', 'admin@example.com');
    await page.fill('#password', 'password');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL('/');
    
    // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° logout
    await page.click('button:has-text("Log out")');
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ authentication
    await expect(page).toHaveURL('/authentication');
    await expect(page.locator('h2')).toContainText('Welcome Back!');
  });
});
